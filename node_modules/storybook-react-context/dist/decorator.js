"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withReactContext = void 0;
/* global window */
var react_1 = __importDefault(require("react"));
var is_plain_object_1 = require("is-plain-object");
var addons_1 = require("@storybook/addons");
var _1 = require(".");
var DefaultContext = react_1.default.createContext({});
exports.withReactContext = (0, addons_1.makeDecorator)({
    name: _1.ADDON_ID,
    parameterName: _1.PARAM_KEY,
    wrapper: function (storyFn, context, _a) {
        var _b = _a.options, options = _b === void 0 ? {} : _b, _c = _a.parameters, parameters = _c === void 0 ? {} : _c;
        if (options.reducer && typeof options.reducer !== 'function') {
            throw new Error('Custom reducer argument must be a function');
        }
        if (options.useProviderValue && typeof options.useProviderValue !== 'function') {
            throw new Error('useProviderValue hook must be a function');
        }
        if (options.reducer && options.useProviderValue) {
            // eslint-disable-next-line no-console
            console.warn('Both custom reducer and useProviderValue hook are defined. Since both affect the provider value, only one should be used; otherwise, the useProviderValue takes priority.');
        }
        var args = (0, addons_1.useArgs)()[0];
        var _d = __assign(__assign({}, options), parameters), initialState = _d.initialState, useProviderValue = _d.useProviderValue, reducer = _d.reducer, Context = _d.Context;
        var state = (0, is_plain_object_1.isPlainObject)(initialState)
            ? __assign(__assign({}, options.initialState), parameters.initialState) : initialState;
        var providerValue = state;
        if (useProviderValue) {
            providerValue = useProviderValue === null || useProviderValue === void 0 ? void 0 : useProviderValue(state, args);
        }
        else if (reducer) {
            providerValue = react_1.default.useReducer(reducer, state);
        }
        var LocalContext = Context || DefaultContext;
        var ContextWrapper = function (_a) {
            var children = _a.children;
            var ctx = react_1.default.useContext(LocalContext);
            if (typeof children !== 'function') {
                throw new Error('ContextWrapper children must be a function');
            }
            return children(ctx);
        };
        return (react_1.default.createElement(LocalContext.Provider, { value: providerValue },
            react_1.default.createElement(ContextWrapper, null, function (ctx) {
                return storyFn(__assign(__assign({}, context), { context: ctx }));
            })));
    },
});
